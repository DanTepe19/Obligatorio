/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package IU;

import Controladores.ControladorAppGestor;
import Excepciones.PedidoException;
import Logica.Gestor;
import Logica.Pedido;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author diego
 */
public class AppGestor extends javax.swing.JFrame implements IVistaAppGestor {

    private ControladorAppGestor controlador;
    private Gestor gestor;
    private ArrayList<Pedido> pedidosVisibles;

    public AppGestor(Gestor gestor) {
        initComponents();
        this.gestor = gestor;
        setTitle("Procesar Pedidos");
        jLabel1.setText("Gestor: " + gestor.getNombreCompleto() + " | Unidad Procesadora: " + gestor.getProcesadora().getNombre());
        controlador = new ControladorAppGestor(this, gestor);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jButton1 = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("jLabel1");

        jButton1.setText("Tomar Pedido");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Nombre de ítem", "Descripción", "Cliente", "FechaHora", "Estado"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jButton2.setText("Finalizar Pedido");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Entregar Pedido");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 836, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 846, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            int seleccion = jTable1.getSelectedRow();

            if (seleccion == -1) {
                throw new PedidoException("Debe seleccionar un pedido");
            }

            DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();

            String nombreItem = (String) modelo.getValueAt(seleccion, 0);
            String comentario = (String) modelo.getValueAt(seleccion, 1);
            String estado = (String) modelo.getValueAt(seleccion, 4);

            Pedido pedidoAfinalizar = null;
            for (Pedido p : gestor.getPedidos()) {
                if (p.getItem().getNombre().equals(nombreItem)
                        && p.getComentario().equals(comentario)
                        && p.getEstado().getNombre().equals(estado)) {
                    pedidoAfinalizar = p;
                    break;
                }
            }

            controlador.finalizarPedido(pedidoAfinalizar);
            mostrarMensaje(pedidoAfinalizar);
            jLabel2.setText("Pedido finalizado correctamente: " + nombreItem);

        } catch (PedidoException ex) {
            jLabel2.setText(ex.getMessage());
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            int seleccion = jTable1.getSelectedRow();

            if (seleccion == -1) {
                throw new PedidoException("Debe seleccionar un pedido");
            }

            DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();

            String nombreItem = (String) modelo.getValueAt(seleccion, 0);
            String comentario = (String) modelo.getValueAt(seleccion, 1);
            String estado = (String) modelo.getValueAt(seleccion, 4);

            Pedido pedido = null;
            for (Pedido p : gestor.getPedidos()) {
                if (p.getItem().getNombre().equals(nombreItem)
                        && p.getComentario().equals(comentario)
                        && p.getEstado().getNombre().equals(estado)) {
                    pedido = p;
                    break;
                }
            }

            controlador.entregarPedido(pedido);
            jLabel2.setText("Pedido entregado: " + nombreItem);

        } catch (PedidoException ex) {
            jLabel2.setText(ex.getMessage());
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            int seleccion = jList1.getSelectedIndex();
            if (seleccion != -1 && seleccion < pedidosVisibles.size()) {
                Pedido pedidoSeleccionado = pedidosVisibles.get(seleccion);
                controlador.tomarPedido(pedidoSeleccionado);
            }
        } catch (PedidoException ex) {
            jLabel2.setText(ex.getMessage());
        }
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void mostrarPedidosPendientes(ArrayList<Pedido> pedidos) {
        DefaultListModel<String> model = new DefaultListModel<>();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy - HH:mm");

        pedidosVisibles = new ArrayList<>(pedidos);

        for (Pedido p : pedidos) {
            model.addElement(p.getItem().getNombre() + " - Cliente: " + p.getServicio().getCliente().getNombreCompleto() + " - " + p.getFechaHora().format(formatter));
        }
        jList1.setModel(model);
    }

    @Override
    public void mostrarPedidosGestor(ArrayList<Pedido> pedidos) {
        javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy - HH:mm");

        for (Pedido p : pedidos) {
            Object[] fila = new Object[]{
                p.getItem().getNombre(),
                p.getComentario(),
                p.getServicio().getCliente().getNombreCompleto(),
                p.getFechaHora().format(formatter),
                p.getEstado().getNombre()
            };
            model.addRow(fila);
        }
    }
    
    @Override
    public void mostrarMensaje(Pedido pedidoAfinalizar) {
        if (pedidoAfinalizar.getEstado().getNombre().equals("FINALIZADO")
                && pedidoAfinalizar.getServicio().getCliente().getDispositivo() == null) {
            String mensaje = "<html>El pedido '" + pedidoAfinalizar.getItem().getNombre() + "' del cliente "
                    + pedidoAfinalizar.getServicio().getCliente().getNombreCompleto() + " ya está finalizado.</html>";
            new Mensaje(mensaje).setVisible(true);
        }
    }
}
